{"version":3,"file":"index.js","mappings":";;;;;;;;;;AAAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;ACtBA,uEAAuE;AACvE,MAAM,EAAC,GAAG,EAAE,aAAa,EAAC,GAAG,mBAAO,CAAC,0BAAU,CAAC;AAChD,MAAM,IAAI,GAAG,mBAAO,CAAC,kBAAM,CAAC;AAE5B,SAAS,YAAY;IACnB,6BAA6B;IAC7B,MAAM,UAAU,GAAG,IAAI,aAAa,CAAC;QACnC,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,GAAG;QACX,cAAc,EAAE;YACd,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC;SAC5C;KACF,CAAC;IAEF,sCAAsC;IACtC,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC;IAEjC,qBAAqB;IACrB,wCAAwC;AAC1C,CAAC;AAED,wDAAwD;AACxD,yDAAyD;AACzD,sDAAsD;AACtD,GAAG,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;IACxB,YAAY,EAAE;IAEd,GAAG,CAAC,EAAE,CAAC,UAAU,EAAE;QACjB,iEAAiE;QACjE,4DAA4D;QAC5D,IAAI,aAAa,CAAC,aAAa,EAAE,CAAC,MAAM,KAAK,CAAC;YAAE,YAAY,EAAE;IAChE,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,wEAAwE;AACxE,0EAA0E;AAC1E,2BAA2B;AAC3B,GAAG,CAAC,EAAE,CAAC,mBAAmB,EAAE;IAC1B,IAAI,OAAO,CAAC,QAAQ,KAAK,QAAQ;QAAE,GAAG,CAAC,IAAI,EAAE;AAC/C,CAAC,CAAC;AAEF,4EAA4E;AAC5E,uEAAuE","sources":["webpack://electron-quick-start/external node-commonjs \"electron\"","webpack://electron-quick-start/external node-commonjs \"path\"","webpack://electron-quick-start/webpack/bootstrap","webpack://electron-quick-start/./src/index.ts"],"sourcesContent":["module.exports = require(\"electron\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// Modules to control application life and create native browser window\r\nconst {app, BrowserWindow} = require('electron')\r\nconst path = require('path')\r\n\r\nfunction createWindow () {\r\n  // Create the browser window.\r\n  const mainWindow = new BrowserWindow({\r\n    width: 800,\r\n    height: 600,\r\n    webPreferences: {\r\n      preload: path.join(__dirname, 'preload.js')\r\n    }\r\n  })\r\n\r\n  // and load the index.html of the app.\r\n  mainWindow.loadFile('index.html')\r\n\r\n  // Open the DevTools.\r\n  // mainWindow.webContents.openDevTools()\r\n}\r\n\r\n// This method will be called when Electron has finished\r\n// initialization and is ready to create browser windows.\r\n// Some APIs can only be used after this event occurs.\r\napp.whenReady().then(() => {\r\n  createWindow()\r\n\r\n  app.on('activate', function () {\r\n    // On macOS it's common to re-create a window in the app when the\r\n    // dock icon is clicked and there are no other windows open.\r\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\r\n  })\r\n})\r\n\r\n// Quit when all windows are closed, except on macOS. There, it's common\r\n// for applications and their menu bar to stay active until the user quits\r\n// explicitly with Cmd + Q.\r\napp.on('window-all-closed', function () {\r\n  if (process.platform !== 'darwin') app.quit()\r\n})\r\n\r\n// In this file you can include the rest of your app's specific main process\r\n// code. You can also put them in separate files and require them here.\r\n"],"names":[],"sourceRoot":""}